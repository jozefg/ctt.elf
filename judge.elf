%% Based on Jon Sterling's trick

cxt : type.
hterm : cxt -> type.

nil : cxt.
,   : {C : cxt} hterm C -> cxt. %infix right 3 , .

!   : term -> hterm nil.
@   : (term -> hterm C) -> hterm (C , A).

weaken : {C : cxt} term -> hterm C -> type.
%mode weaken +A +B -C.

weaken/! : weaken _ T (! T).
weaken/@ : weaken _ T (@ [x] W)
            <- weaken _ T W.
%worlds () (weaken _ _ _).
%total (T) (weaken T _ _).

judge       : cxt -> type.
`equal      : hterm C -> hterm C -> hterm C -> judge C.

spread : judge (C , A) -> (term -> term -> judge C) -> type.
spread/equal      : spread
                     (`equal (@ A) (@ B) (@ T))
                     ([x][y] `equal (A x) (B x) (T y)).

>> : {C : cxt} judge C -> type. %infix none 2 >> .
>>/!equal      : nil >> `equal (! N) (! M) (! T)
                  <- equal N M T.
>>/@           : C , A >> J
                  <- spread J XYJ
                  <- ({x}{x'}{y}{y'} weaken C x x'
                        -> weaken C y y'
                        -> C >> `equal x' y' A
                        -> C >> XYJ x y).
